/* parser generated by jison 0.4.10 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"lines":4,"line":5,"indentation":6,"indentationLevel":7,"INDENT":8,"DOCTYPE":9,"end":10,"lineMain":11,"tag":12,"rest":13,"COMMENT":14,"FILTER":15,"FILTER_LINE":16,"NEWLINE":17,"EOF":18,"name":19,"tagComponents":20,"attributes":21,"idComponent":22,"classComponents":23,"ID":24,"CLASS":25,"LEFT_PARENTHESIS":26,"attributePairs":27,"RIGHT_PARENTHESIS":28,"LEFT_BRACE":29,"RIGHT_BRACE":30,"SEPARATOR":31,"attributePair":32,"ATTRIBUTE":33,"EQUAL":34,"ATTRIBUTE_VALUE":35,"TAG":36,"CODE":37,"HYPHEN":38,"text":39,"beginText":40,"TEXT":41,"WHITESPACE":42,"$accept":0,"$end":1},
terminals_: {2:"error",8:"INDENT",9:"DOCTYPE",14:"COMMENT",15:"FILTER",16:"FILTER_LINE",17:"NEWLINE",18:"EOF",24:"ID",25:"CLASS",26:"LEFT_PARENTHESIS",28:"RIGHT_PARENTHESIS",29:"LEFT_BRACE",30:"RIGHT_BRACE",31:"SEPARATOR",33:"ATTRIBUTE",34:"EQUAL",35:"ATTRIBUTE_VALUE",36:"TAG",37:"CODE",38:"HYPHEN",41:"TEXT",42:"WHITESPACE"},
productions_: [0,[3,1],[4,2],[4,1],[6,0],[6,1],[7,2],[7,1],[5,2],[5,3],[5,1],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[10,1],[10,1],[12,2],[12,2],[12,1],[12,1],[20,3],[20,2],[20,2],[20,2],[20,1],[20,1],[22,1],[23,2],[23,1],[21,3],[21,3],[27,3],[27,1],[32,3],[19,1],[13,2],[13,2],[13,1],[39,2],[39,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return this.$ = yy.nodePath[0].children;
break;
case 2:this.$ = $$[$0-1];
break;
case 3:this.$ = $$[$0];
break;
case 4:this.$ = 0;
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = $$[$0-1] + 1;
break;
case 7:this.$ = 1;
break;
case 8:this.$ = "doctype";
break;
case 9:this.$ = yy.append($$[$0-1], $$[$0-2]);
break;
case 10:this.$ = (function () {
        if ($$[$0].newline) {
          return yy.newline();
        }
      }());
break;
case 11:this.$ = yy.extend($$[$0-1], $$[$0]);
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = {
          comment: $$[$0]
        };
break;
case 15:this.$ = {
          filter: $$[$0]
        };
break;
case 16:this.$ = {
          filterLine: $$[$0]
        };
break;
case 17:this.$ = {
          newline: true
        };
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = (function () {
        $$[$0].tag = $$[$0-1];
        return $$[$0];
      }());
break;
case 20:this.$ = {
          tag: $$[$0-1],
          attributes: $$[$0]
        };
break;
case 21:this.$ = {
          tag: $$[$0]
        };
break;
case 22:this.$ = yy.extend($$[$0], {
          tag: "div"
        });
break;
case 23:this.$ = {
          id: $$[$0-2],
          classes: $$[$0-1],
          attributes: $$[$0]
        };
break;
case 24:this.$ = {
          id: $$[$0-1],
          attributes: $$[$0]
        };
break;
case 25:this.$ = {
          classes: $$[$0-1],
          attributes: $$[$0]
        };
break;
case 26:this.$ = {
          id: $$[$0-1],
          classes: $$[$0]
        };
break;
case 27:this.$ = {
          id: $$[$0]
        };
break;
case 28:this.$ = {
          classes: $$[$0]
        };
break;
case 29:this.$ = $$[$0];
break;
case 30:this.$ = $$[$0-1].concat($$[$0]);
break;
case 31:this.$ = [$$[$0]];
break;
case 32:this.$ = $$[$0-1];
break;
case 33:this.$ = $$[$0-1];
break;
case 34:this.$ = $$[$0-2].concat($$[$0]);
break;
case 35:this.$ = [$$[$0]];
break;
case 36:this.$ = {
          name: $$[$0-2],
          value: $$[$0]
        };
break;
case 37:this.$ = $$[$0];
break;
case 38:this.$ = {
          bufferedCode: $$[$0]
        };
break;
case 39:this.$ = {
          unbufferedCode: $$[$0]
        };
break;
case 40:this.$ = {
          text: $$[$0] + "\n"
        };
break;
case 41:this.$ = $$[$0];
break;
case 42:this.$ = $$[$0];
break;
case 43:this.$ = yy.lexer.begin('text');
break;
}
},
table: [{3:1,4:2,5:3,6:5,7:7,8:[1,10],9:[1,4],10:6,14:[2,4],15:[2,4],16:[2,4],17:[1,8],18:[1,9],24:[2,4],25:[2,4],34:[2,4],36:[2,4],38:[2,4],41:[2,4],42:[2,4]},{1:[3]},{1:[2,1],5:11,6:5,7:7,8:[1,10],9:[1,4],10:6,14:[2,4],15:[2,4],16:[2,4],17:[1,8],18:[1,9],24:[2,4],25:[2,4],34:[2,4],36:[2,4],38:[2,4],41:[2,4],42:[2,4]},{1:[2,3],8:[2,3],9:[2,3],14:[2,3],15:[2,3],16:[2,3],17:[2,3],18:[2,3],24:[2,3],25:[2,3],34:[2,3],36:[2,3],38:[2,3],41:[2,3],42:[2,3]},{10:12,17:[1,8],18:[1,9]},{11:13,12:14,13:15,14:[1,16],15:[1,17],16:[1,18],19:19,20:20,22:25,23:26,24:[1,29],25:[1,30],34:[1,21],36:[1,24],38:[1,22],39:23,40:27,41:[1,28],42:[1,31]},{1:[2,10],8:[2,10],9:[2,10],14:[2,10],15:[2,10],16:[2,10],17:[2,10],18:[2,10],24:[2,10],25:[2,10],34:[2,10],36:[2,10],38:[2,10],41:[2,10],42:[2,10]},{8:[1,32],14:[2,5],15:[2,5],16:[2,5],24:[2,5],25:[2,5],34:[2,5],36:[2,5],38:[2,5],41:[2,5],42:[2,5]},{1:[2,17],8:[2,17],9:[2,17],14:[2,17],15:[2,17],16:[2,17],17:[2,17],18:[2,17],24:[2,17],25:[2,17],34:[2,17],36:[2,17],38:[2,17],41:[2,17],42:[2,17]},{1:[2,18],8:[2,18],9:[2,18],14:[2,18],15:[2,18],16:[2,18],17:[2,18],18:[2,18],24:[2,18],25:[2,18],34:[2,18],36:[2,18],38:[2,18],41:[2,18],42:[2,18]},{8:[2,7],14:[2,7],15:[2,7],16:[2,7],24:[2,7],25:[2,7],34:[2,7],36:[2,7],38:[2,7],41:[2,7],42:[2,7]},{1:[2,2],8:[2,2],9:[2,2],14:[2,2],15:[2,2],16:[2,2],17:[2,2],18:[2,2],24:[2,2],25:[2,2],34:[2,2],36:[2,2],38:[2,2],41:[2,2],42:[2,2]},{1:[2,8],8:[2,8],9:[2,8],14:[2,8],15:[2,8],16:[2,8],17:[2,8],18:[2,8],24:[2,8],25:[2,8],34:[2,8],36:[2,8],38:[2,8],41:[2,8],42:[2,8]},{10:33,17:[1,8],18:[1,9]},{13:34,17:[2,12],18:[2,12],34:[1,21],38:[1,22],39:23,40:27,41:[1,28],42:[1,31]},{17:[2,13],18:[2,13]},{17:[2,14],18:[2,14]},{17:[2,15],18:[2,15]},{17:[2,16],18:[2,16]},{17:[2,21],18:[2,21],20:35,21:36,22:25,23:26,24:[1,29],25:[1,30],26:[1,37],29:[1,38],34:[2,21],38:[2,21],41:[2,21],42:[2,21]},{17:[2,22],18:[2,22],34:[2,22],38:[2,22],41:[2,22],42:[2,22]},{37:[1,39]},{37:[1,40]},{17:[2,40],18:[2,40]},{17:[2,37],18:[2,37],24:[2,37],25:[2,37],26:[2,37],29:[2,37],34:[2,37],38:[2,37],41:[2,37],42:[2,37]},{17:[2,27],18:[2,27],21:42,23:41,25:[1,30],26:[1,37],29:[1,38],34:[2,27],38:[2,27],41:[2,27],42:[2,27]},{17:[2,28],18:[2,28],21:43,25:[1,44],26:[1,37],29:[1,38],34:[2,28],38:[2,28],41:[2,28],42:[2,28]},{41:[1,45]},{17:[2,42],18:[2,42]},{17:[2,29],18:[2,29],25:[2,29],26:[2,29],29:[2,29],34:[2,29],38:[2,29],41:[2,29],42:[2,29]},{17:[2,31],18:[2,31],25:[2,31],26:[2,31],29:[2,31],34:[2,31],38:[2,31],41:[2,31],42:[2,31]},{41:[2,43]},{8:[2,6],14:[2,6],15:[2,6],16:[2,6],24:[2,6],25:[2,6],34:[2,6],36:[2,6],38:[2,6],41:[2,6],42:[2,6]},{1:[2,9],8:[2,9],9:[2,9],14:[2,9],15:[2,9],16:[2,9],17:[2,9],18:[2,9],24:[2,9],25:[2,9],34:[2,9],36:[2,9],38:[2,9],41:[2,9],42:[2,9]},{17:[2,11],18:[2,11]},{17:[2,19],18:[2,19],34:[2,19],38:[2,19],41:[2,19],42:[2,19]},{17:[2,20],18:[2,20],34:[2,20],38:[2,20],41:[2,20],42:[2,20]},{27:46,32:47,33:[1,48]},{27:49,32:47,33:[1,48]},{17:[2,38],18:[2,38]},{17:[2,39],18:[2,39]},{17:[2,26],18:[2,26],21:50,25:[1,44],26:[1,37],29:[1,38],34:[2,26],38:[2,26],41:[2,26],42:[2,26]},{17:[2,24],18:[2,24],34:[2,24],38:[2,24],41:[2,24],42:[2,24]},{17:[2,25],18:[2,25],34:[2,25],38:[2,25],41:[2,25],42:[2,25]},{17:[2,30],18:[2,30],25:[2,30],26:[2,30],29:[2,30],34:[2,30],38:[2,30],41:[2,30],42:[2,30]},{17:[2,41],18:[2,41]},{28:[1,51],31:[1,52]},{28:[2,35],30:[2,35],31:[2,35]},{34:[1,53]},{30:[1,54],31:[1,52]},{17:[2,23],18:[2,23],34:[2,23],38:[2,23],41:[2,23],42:[2,23]},{17:[2,32],18:[2,32],34:[2,32],38:[2,32],41:[2,32],42:[2,32]},{32:55,33:[1,48]},{35:[1,56]},{17:[2,33],18:[2,33],34:[2,33],38:[2,33],41:[2,33],42:[2,33]},{28:[2,34],30:[2,34],31:[2,34]},{28:[2,36],30:[2,36],31:[2,36]}],
defaultActions: {31:[2,43]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
undefined
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}