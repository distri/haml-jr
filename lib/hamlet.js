(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var Observable, Runtime, bindEvent, bindObservable, bufferTo, classes, contentBind, createElement, empty, eventNames, get, id, initContent, isEvent, isFragment, makeElement, observeAttribute, observeAttributes, observeContent, specialBindings, valueBind, valueIndexOf;

  Observable = require("o_0");

  eventNames = "abort\nblur\nchange\nclick\ndblclick\ndrag\ndragend\ndragenter\ndragleave\ndragover\ndragstart\ndrop\nerror\nfocus\ninput\nkeydown\nkeypress\nkeyup\nload\nmousedown\nmousemove\nmouseout\nmouseover\nmouseup\nreset\nresize\nscroll\nselect\nsubmit\ntouchcancel\ntouchend\ntouchenter\ntouchleave\ntouchmove\ntouchstart\nunload".split("\n");

  isEvent = function(name) {
    return eventNames.indexOf(name) !== -1;
  };

  isFragment = function(node) {
    return (node != null ? node.nodeType : void 0) === 11;
  };

  initContent = function(element) {
    var allContent, update;
    if (element._hamlet_content) {
      return element._hamlet_content;
    }
    allContent = (element._hamlet_content != null ? element._hamlet_content : element._hamlet_content = Observable.concat());
    update = function() {
      empty(element);
      return allContent.each(function(item) {
        return element.appendChild(item);
      });
    };
    bindObservable(element, allContent, null, update);
    return allContent;
  };

  contentBind = function(element, value) {
    initContent(element).push(value);
    return element;
  };

  valueBind = function(element, value, context) {
    Observable(function() {
      var update;
      value = Observable(value, context);
      switch (element.nodeName) {
        case "SELECT":
          element.oninput = element.onchange = function() {
            var optionValue, _ref, _value;
            _ref = this.children[this.selectedIndex], optionValue = _ref.value, _value = _ref._value;
            return value(_value || optionValue);
          };
          update = function(newValue) {
            var options;
            element._value = newValue;
            if ((options = element._options)) {
              if (newValue.value != null) {
                return element.value = (typeof newValue.value === "function" ? newValue.value() : void 0) || newValue.value;
              } else {
                return element.selectedIndex = valueIndexOf(options, newValue);
              }
            } else {
              return element.value = newValue;
            }
          };
          return bindObservable(element, value, context, update);
        default:
          element.oninput = element.onchange = function() {
            return value(element.value);
          };
          if (typeof element.attachEvent === "function") {
            element.attachEvent("onkeydown", function() {
              return setTimeout(function() {
                return value(element.value);
              }, 0);
            });
          }
          return bindObservable(element, value, context, function(newValue) {
            if (element.value !== newValue) {
              return element.value = newValue;
            }
          });
      }
    });
  };

  specialBindings = {
    INPUT: {
      checked: function(element, value, context) {
        element.onchange = function() {
          return typeof value === "function" ? value(element.checked) : void 0;
        };
        return bindObservable(element, value, context, function(newValue) {
          return element.checked = newValue;
        });
      }
    },
    SELECT: {
      options: function(element, values, context) {
        var updateValues;
        values = Observable(values, context);
        updateValues = function(values) {
          empty(element);
          element._options = values;
          return values.map(function(value, index) {
            var option, optionName, optionValue;
            option = createElement("option");
            option._value = value;
            if (typeof value === "object") {
              optionValue = (value != null ? value.value : void 0) || index;
            } else {
              optionValue = value.toString();
            }
            bindObservable(option, optionValue, value, function(newValue) {
              return option.value = newValue;
            });
            optionName = (value != null ? value.name : void 0) || value;
            bindObservable(option, optionName, value, function(newValue) {
              return option.textContent = option.innerText = newValue;
            });
            element.appendChild(option);
            if (value === element._value) {
              element.selectedIndex = index;
            }
            return option;
          });
        };
        return bindObservable(element, values, context, updateValues);
      }
    }
  };

  observeAttribute = function(element, context, name, value) {
    var binding, nodeName, _ref;
    nodeName = element.nodeName;
    if (name === "value") {
      valueBind(element, value);
    } else if (binding = (_ref = specialBindings[nodeName]) != null ? _ref[name] : void 0) {
      binding(element, value, context);
    } else if (name.match(/^on/) && isEvent(name.substr(2))) {
      bindEvent(element, name, value, context);
    } else if (isEvent(name)) {
      bindEvent(element, "on" + name, value, context);
    } else {
      bindObservable(element, value, context, function(newValue) {
        if ((newValue != null) && newValue !== false) {
          return element.setAttribute(name, newValue);
        } else {
          return element.removeAttribute(name);
        }
      });
    }
    return element;
  };

  observeAttributes = function(element, context, attributes) {
    return Object.keys(attributes).forEach(function(name) {
      var value;
      value = attributes[name];
      return observeAttribute(element, context, name, value);
    });
  };

  bindObservable = function(element, value, context, update) {
    var observable, observe, unobserve;
    observable = Observable(value, context);
    observe = function() {
      observable.observe(update);
      return update(observable());
    };
    unobserve = function() {
      return observable.stopObserving(update);
    };
    observe();
    return element;
  };

  bindEvent = function(element, name, fn, context) {
    return element[name] = function() {
      return fn.apply(context, arguments);
    };
  };

  id = function(element, context, sources) {
    var lastId, update, value;
    value = Observable.concat.apply(Observable, sources.map(function(source) {
      return Observable(source, context);
    }));
    update = function(newId) {
      return element.id = newId;
    };
    lastId = function() {
      return value.last();
    };
    return bindObservable(element, lastId, context, update);
  };

  classes = function(element, context, sources) {
    var classNames, update, value;
    value = Observable.concat.apply(Observable, sources.map(function(source) {
      return Observable(source, context);
    }));
    update = function(classNames) {
      return element.className = classNames;
    };
    classNames = function() {
      return value.join(" ");
    };
    return bindObservable(element, classNames, context, update);
  };

  createElement = function(name) {
    return document.createElement(name);
  };

  observeContent = function(element, context, contentFn) {
    var currentContents, observableContentsFn, update;
    observableContentsFn = Observable(function() {
      var contents;
      contents = Observable.concat();
      contentFn.call(context, {
        buffer: bufferTo(context, contents),
        element: makeElement
      });
      return contents;
    }, context);
    currentContents = observableContentsFn();
    update = function() {
      empty(element);
      return currentContents.each(function(item) {
        if (typeof item === "string") {
          return element.appendChild(document.createTextNode(item));
        } else if (typeof item === "number") {
          return element.appendChild(document.createTextNode(item));
        } else {
          return element.appendChild(item);
        }
      });
    };
    observableContentsFn.observe(function(newContents) {
      currentContents.stopObserving(update);
      currentContents = newContents;
      currentContents.observe(update);
      return update();
    });
    currentContents.observe(update);
    return update();
  };

  bufferTo = function(context, collection) {
    return function(content) {
      if (typeof content === 'function') {
        content = Observable(content, context);
      }
      collection.push(content);
      return content;
    };
  };

  makeElement = function(name, context, attributes, fn) {
    var element;
    if (attributes == null) {
      attributes = {};
    }
    element = createElement(name);
    Observable(function() {
      if (attributes.id != null) {
        id(element, context, attributes.id);
        delete attributes.id;
      }
      if (attributes["class"] != null) {
        classes(element, context, attributes["class"]);
        delete attributes["class"];
      }
      observeAttributes(element, context, attributes);
      if (element.nodeName !== "SELECT") {
        return observeContent(element, context, fn);
      }
    });
    return element;
  };

  Runtime = function(context) {
    var self;
    self = {
      buffer: function(content) {
        if (self.root) {
          throw "Cannot have multiple root elements";
        }
        return self.root = content;
      },
      element: makeElement,
      filter: function(name, content) {}
    };
    return self;
  };

  Runtime.VERSION = require("../package.json").version;

  Runtime.Observable = Observable;

  module.exports = Runtime;

  empty = function(node) {
    var child, _results;
    _results = [];
    while (child = node.firstChild) {
      _results.push(node.removeChild(child));
    }
    return _results;
  };

  valueIndexOf = function(options, value) {
    if (typeof value === "object") {
      return options.indexOf(value);
    } else {
      return options.map(function(option) {
        return option.toString();
      }).indexOf(value.toString());
    }
  };

  get = function(x) {
    if (typeof x === 'function') {
      return x();
    } else {
      return x;
    }
  };

}).call(this);

},{"../package.json":12,"o_0":11}],2:[function(require,module,exports){
(function (global){
// Generated by CoffeeScript 1.7.1
(function() {
  global.Hamlet = require("./runtime");

  Hamlet.Compiler = require("hamlet-compiler");

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./runtime":1,"hamlet-compiler":7}],3:[function(require,module,exports){

},{}],4:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require("FWaASH"))
},{"FWaASH":5}],5:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var ROOT_NAME, indentText, util;

  indentText = function(text, indent) {
    if (indent == null) {
      indent = "  ";
    }
    return indent + text.replace(/\n/g, "\n" + indent);
  };

  ROOT_NAME = "__root";

  util = {
    indent: indentText,
    filters: {
      verbatim: function(content, compiler) {
        return compiler.buffer('"""' + content.replace(/(#|")/g, "\\$1") + '"""');
      },
      plain: function(content, compiler) {
        return compiler.buffer(JSON.stringify(content));
      },
      coffeescript: function(content, compiler) {
        return [content];
      },
      javascript: function(content, compiler) {
        return ["`", compiler.indent(content), "`"];
      }
    },
    element: function(tag, attributes, contents) {
      var lines;
      if (attributes == null) {
        attributes = [];
      }
      if (contents == null) {
        contents = [];
      }
      return lines = ["" + ROOT_NAME + ".buffer " + ROOT_NAME + ".element " + (JSON.stringify(tag)) + ", this, {" + (attributes.join('\n')) + "}, (" + ROOT_NAME + ") ->", indentText(contents.join("\n")), "  return"];
    },
    buffer: function(value) {
      return ["" + ROOT_NAME + ".buffer " + value];
    },
    attributes: function(node) {
      var attributeLines, attributes, classes, id, ids, idsAndClasses;
      id = node.id, classes = node.classes, attributes = node.attributes;
      if (id) {
        ids = [JSON.stringify(id)];
      } else {
        ids = [];
      }
      classes = (classes || []).map(JSON.stringify);
      if (attributes) {
        attributes = attributes.filter(function(_arg) {
          var name, value;
          name = _arg.name, value = _arg.value;
          if (name === "class") {
            classes.push(value);
            return false;
          } else if (name === "id") {
            ids.push(value);
            return false;
          } else {
            return true;
          }
        });
      } else {
        attributes = [];
      }
      idsAndClasses = [];
      if (ids.length) {
        idsAndClasses.push("id: [" + (ids.join(', ')) + "]");
      }
      if (classes.length) {
        idsAndClasses.push("class: [" + (classes.join(', ')) + "]");
      }
      attributeLines = attributes.map(function(_arg) {
        var name, value;
        name = _arg.name, value = _arg.value;
        name = JSON.stringify(name);
        return "" + name + ": " + value;
      });
      return idsAndClasses.concat(attributeLines);
    },
    render: function(node) {
      var filter, tag, text;
      tag = node.tag, filter = node.filter, text = node.text;
      if (tag) {
        return this.tag(node);
      } else if (filter) {
        return this.filter(node);
      } else {
        return this.contents(node);
      }
    },
    filter: function(node) {
      var filter, filterName;
      filterName = node.filter;
      if (filter = this.filters[filterName]) {
        return [].concat.apply([], this.filters[filterName](node.content, this));
      } else {
        return ["" + ROOT_NAME + ".filter(" + (JSON.stringify(filterName)) + ", " + (JSON.stringify(node.content)) + ")"];
      }
    },
    contents: function(node) {
      var bufferedCode, childContent, children, contents, indent, text, unbufferedCode;
      children = node.children, bufferedCode = node.bufferedCode, unbufferedCode = node.unbufferedCode, text = node.text;
      if (unbufferedCode) {
        indent = true;
        contents = [unbufferedCode];
      } else if (bufferedCode) {
        contents = this.buffer(bufferedCode);
      } else if (text) {
        contents = this.buffer(JSON.stringify(text));
      } else if (node.tag) {
        contents = [];
      } else if (node.comment) {
        return [];
      } else {
        contents = [];
        console.warn("No content for node:", node);
      }
      if (children) {
        childContent = this.renderNodes(children);
        if (indent) {
          childContent = this.indent(childContent.join("\n"));
        }
        contents = contents.concat(childContent);
      }
      return contents;
    },
    renderNodes: function(nodes) {
      return [].concat.apply([], nodes.map(this.render, this));
    },
    tag: function(node) {
      var tag;
      tag = node.tag;
      return this.element(tag, this.attributes(node), this.contents(node));
    }
  };

  exports.compile = function(parseTree, _arg) {
    var compiler, exports, items, options, program, programSource, runtime, source, _ref;
    _ref = _arg != null ? _arg : {}, compiler = _ref.compiler, runtime = _ref.runtime, exports = _ref.exports;
    if (runtime == null) {
      runtime = "require" + "(\"hamlet-runtime\")";
    }
    if (exports == null) {
      exports = "module.exports";
    }
    items = util.renderNodes(parseTree);
    if (exports) {
      exports = "" + exports + " = ";
    } else {
      exports = "";
    }
    source = "" + exports + "(data) ->\n  \"use strict\"\n  (->\n    " + ROOT_NAME + " = " + runtime + "(this)\n\n" + (util.indent(items.join("\n"), "    ")) + "\n    return " + ROOT_NAME + ".root\n  ).call(data)";
    options = {
      bare: true
    };
    programSource = source;
    program = compiler.compile(programSource, options);
    return program;
  };

}).call(this);

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var compile, parser;

  compile = require("./compiler").compile;

  parser = require("hamlet-parser");

  module.exports = {
    compile: function(input, options) {
      if (options == null) {
        options = {};
      }
      if (typeof input === "string") {
        input = parser.parse(input);
      }
      return compile(input, options);
    },
    parser: parser
  };

}).call(this);

},{"./compiler":6,"hamlet-parser":9}],8:[function(require,module,exports){
var lexer=function(){var lexer={EOF:1,parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},setInput:function(input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},input:function(){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},unput:function(ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},more:function(){this._more=true;return this},reject:function(){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},less:function(n){this.unput(this.match.slice(n))},pastInput:function(){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},test_match:function(match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},next:function(){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},begin:function begin(condition){this.conditionStack.push(condition)},popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},pushState:function pushState(condition){this.begin(condition)},stateStackSize:function stateStackSize(){return this.conditionStack.length},options:{moduleName:"lexer"},performAction:function anonymous(yy,yy_,$avoiding_name_collisions,YY_START){var YYSTATE=YY_START;switch($avoiding_name_collisions){case 0:return"SEPARATOR";break;case 1:this.popState();return"RIGHT_PARENTHESIS";break;case 2:return"ATTRIBUTE";break;case 3:this.begin("value");return"EQUAL";break;case 4:return"AT_ATTRIBUTE";break;case 5:this.popState();return"ATTRIBUTE_VALUE";break;case 6:this.popState();return"ATTRIBUTE_VALUE";break;case 7:this.popState();return"ATTRIBUTE_VALUE";break;case 8:yy.indent=0;this.popState();return"NEWLINE";break;case 9:return"FILTER_LINE";break;case 10:yy.indent=0;return"NEWLINE";break;case 11:yy.indent+=1;if(yy.indent>yy.filterIndent){this.begin("filter")};return"INDENT";break;case 12:this.begin("parentheses_attributes");return"LEFT_PARENTHESIS";break;case 13:yy_.yytext=yy_.yytext.substring(1);return"COMMENT";break;case 14:yy.filterIndent=yy.indent;yy_.yytext=yy_.yytext.substring(1);return"FILTER";break;case 15:yy_.yytext=yy_.yytext.substring(1);return"ID";break;case 16:yy_.yytext=yy_.yytext.substring(1);return"CLASS";break;case 17:yy_.yytext=yy_.yytext.substring(1);return"TAG";break;case 18:yy_.yytext=yy_.yytext.substring(1).trim();return"BUFFERED_CODE";break;case 19:yy_.yytext=yy_.yytext.substring(1).trim();return"UNBUFFERED_CODE";break;case 20:yy_.yytext=yy_.yytext.trim();return"TEXT";break}},rules:[/^(?:[ \t]+)/,/^(?:\))/,/^(?:([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:=)/,/^(?:@([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:"(\\.|[^\\"])*")/,/^(?:'(\\.|[^\\'])*')/,/^(?:[^ \t\)]*)/,/^(?:(\n|$))/,/^(?:[^\n]*)/,/^(?:\s*(\n|$))/,/^(?:(  |\\t))/,/^(?:\()/,/^(?:\/.*)/,/^(?::([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:#((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:\.((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:%((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:=.*)/,/^(?:-.*)/,/^(?:.*)/],conditions:{filter:{rules:[8,9],inclusive:false},value:{rules:[5,6,7],inclusive:false},parentheses_attributes:{rules:[0,1,2,3,4],inclusive:false},INITIAL:{rules:[10,11,12,13,14,15,16,17,18,19,20],inclusive:true}}};return lexer}();module.exports=lexer;
},{}],9:[function(require,module,exports){
!function(){var extend,lexer,oldParse,parser,__slice=[].slice;lexer=require("./lexer");parser=require("./parser").parser;extend=function(){var name,source,sources,target,_i,_len;target=arguments[0],sources=2<=arguments.length?__slice.call(arguments,1):[];for(_i=0,_len=sources.length;_i<_len;_i++){source=sources[_i];for(name in source){target[name]=source[name]}}return target};oldParse=parser.parse;extend(parser,{lexer:lexer,parse:function(input){extend(parser.yy,{indent:0,nodePath:[{children:[]}],filterIndent:void 0});return oldParse.call(parser,input)}});extend(parser.yy,{extend:extend,newline:function(){var lastNode;lastNode=this.nodePath[this.nodePath.length-1];if(lastNode.filter){return this.appendFilterContent(lastNode,"")}},lastParent:function(indentation){var parent;while(!(parent=this.nodePath[indentation])){indentation-=1}return parent},append:function(node,indentation){var index,lastNode,parent;if(indentation==null){indentation=0}if(node.filterLine){lastNode=this.nodePath[this.nodePath.length-1];this.appendFilterContent(lastNode,node.filterLine);return}parent=this.lastParent(indentation);this.appendChild(parent,node);index=indentation+1;this.nodePath[index]=node;this.nodePath.length=index+1;return node},appendChild:function(parent,child){if(!child.filter){this.filterIndent=void 0;this.lexer.popState()}parent.children||(parent.children=[]);return parent.children.push(child)},appendFilterContent:function(filter,content){filter.content||(filter.content="");return filter.content+=""+content+"\n"}});module.exports=parser}.call(this);
},{"./lexer":8,"./parser":10}],10:[function(require,module,exports){
(function (process){
var parser=function(){var parser={trace:function trace(){},yy:{},symbols_:{error:2,root:3,lines:4,line:5,indentation:6,indentationLevel:7,INDENT:8,lineMain:9,end:10,tag:11,rest:12,COMMENT:13,FILTER:14,FILTER_LINE:15,NEWLINE:16,name:17,tagComponents:18,attributes:19,idComponent:20,classComponents:21,ID:22,CLASS:23,LEFT_PARENTHESIS:24,attributePairs:25,RIGHT_PARENTHESIS:26,SEPARATOR:27,attributePair:28,ATTRIBUTE:29,EQUAL:30,ATTRIBUTE_VALUE:31,AT_ATTRIBUTE:32,TAG:33,BUFFERED_CODE:34,UNBUFFERED_CODE:35,TEXT:36,$accept:0,$end:1},terminals_:{2:"error",8:"INDENT",13:"COMMENT",14:"FILTER",15:"FILTER_LINE",16:"NEWLINE",22:"ID",23:"CLASS",24:"LEFT_PARENTHESIS",26:"RIGHT_PARENTHESIS",27:"SEPARATOR",29:"ATTRIBUTE",30:"EQUAL",31:"ATTRIBUTE_VALUE",32:"AT_ATTRIBUTE",33:"TAG",34:"BUFFERED_CODE",35:"UNBUFFERED_CODE",36:"TEXT"},productions_:[0,[3,1],[4,2],[4,1],[6,0],[6,1],[7,2],[7,1],[5,3],[5,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[10,1],[11,2],[11,2],[11,1],[11,1],[18,3],[18,2],[18,2],[18,2],[18,1],[18,1],[20,1],[21,2],[21,1],[19,3],[25,3],[25,1],[28,3],[28,1],[17,1],[12,1],[12,1],[12,1]],performAction:function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$){var $0=$$.length-1;switch(yystate){case 1:return this.$=yy.nodePath[0].children;break;case 2:this.$=$$[$0-1];break;case 3:this.$=$$[$0];break;case 4:this.$=0;break;case 5:this.$=$$[$0];break;case 6:this.$=$$[$0-1]+1;break;case 7:this.$=1;break;case 8:this.$=yy.append($$[$0-1],$$[$0-2]);break;case 9:this.$=function(){if($$[$0].newline){return yy.newline()}}();break;case 10:this.$=yy.extend($$[$0-1],$$[$0]);break;case 11:this.$=$$[$0];break;case 12:this.$=$$[$0];break;case 13:this.$={comment:$$[$0]};break;case 14:this.$={filter:$$[$0]};break;case 15:this.$={filterLine:$$[$0]};break;case 16:this.$={newline:true};break;case 17:this.$=function(){$$[$0].tag=$$[$0-1];return $$[$0]}();break;case 18:this.$={tag:$$[$0-1],attributes:$$[$0]};break;case 19:this.$={tag:$$[$0]};break;case 20:this.$=yy.extend($$[$0],{tag:"div"});break;case 21:this.$={id:$$[$0-2],classes:$$[$0-1],attributes:$$[$0]};break;case 22:this.$={id:$$[$0-1],attributes:$$[$0]};break;case 23:this.$={classes:$$[$0-1],attributes:$$[$0]};break;case 24:this.$={id:$$[$0-1],classes:$$[$0]};break;case 25:this.$={id:$$[$0]};break;case 26:this.$={classes:$$[$0]};break;case 27:this.$=$$[$0];break;case 28:this.$=$$[$0-1].concat($$[$0]);break;case 29:this.$=[$$[$0]];break;case 30:this.$=$$[$0-1];break;case 31:this.$=$$[$0-2].concat($$[$0]);break;case 32:this.$=[$$[$0]];break;case 33:this.$={name:$$[$0-2],value:$$[$0]};break;case 34:this.$={name:$$[$0].substring(1),value:$$[$0]};break;case 35:this.$=$$[$0];break;case 36:this.$={bufferedCode:$$[$0]};break;case 37:this.$={unbufferedCode:$$[$0]};break;case 38:this.$={text:$$[$0]+"\n"};break}},table:[{3:1,4:2,5:3,6:4,7:6,8:[1,8],10:5,13:[2,4],14:[2,4],15:[2,4],16:[1,7],22:[2,4],23:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4]},{1:[3]},{1:[2,1],5:9,6:4,7:6,8:[1,8],10:5,13:[2,4],14:[2,4],15:[2,4],16:[1,7],22:[2,4],23:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4]},{1:[2,3],8:[2,3],13:[2,3],14:[2,3],15:[2,3],16:[2,3],22:[2,3],23:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3]},{9:10,11:11,12:12,13:[1,13],14:[1,14],15:[1,15],17:16,18:17,20:22,21:23,22:[1,24],23:[1,25],33:[1,21],34:[1,18],35:[1,19],36:[1,20]},{1:[2,9],8:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],22:[2,9],23:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9]},{8:[1,26],13:[2,5],14:[2,5],15:[2,5],22:[2,5],23:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5]},{1:[2,16],8:[2,16],13:[2,16],14:[2,16],15:[2,16],16:[2,16],22:[2,16],23:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16]},{8:[2,7],13:[2,7],14:[2,7],15:[2,7],22:[2,7],23:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7]},{1:[2,2],8:[2,2],13:[2,2],14:[2,2],15:[2,2],16:[2,2],22:[2,2],23:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2]},{10:27,16:[1,7]},{12:28,16:[2,11],34:[1,18],35:[1,19],36:[1,20]},{16:[2,12]},{16:[2,13]},{16:[2,14]},{16:[2,15]},{16:[2,19],18:29,19:30,20:22,21:23,22:[1,24],23:[1,25],24:[1,31],34:[2,19],35:[2,19],36:[2,19]},{16:[2,20],34:[2,20],35:[2,20],36:[2,20]},{16:[2,36]},{16:[2,37]},{16:[2,38]},{16:[2,35],22:[2,35],23:[2,35],24:[2,35],34:[2,35],35:[2,35],36:[2,35]},{16:[2,25],19:33,21:32,23:[1,25],24:[1,31],34:[2,25],35:[2,25],36:[2,25]},{16:[2,26],19:34,23:[1,35],24:[1,31],34:[2,26],35:[2,26],36:[2,26]},{16:[2,27],23:[2,27],24:[2,27],34:[2,27],35:[2,27],36:[2,27]},{16:[2,29],23:[2,29],24:[2,29],34:[2,29],35:[2,29],36:[2,29]},{8:[2,6],13:[2,6],14:[2,6],15:[2,6],22:[2,6],23:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6]},{1:[2,8],8:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],22:[2,8],23:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8]},{16:[2,10]},{16:[2,17],34:[2,17],35:[2,17],36:[2,17]},{16:[2,18],34:[2,18],35:[2,18],36:[2,18]},{25:36,28:37,29:[1,38],32:[1,39]},{16:[2,24],19:40,23:[1,35],24:[1,31],34:[2,24],35:[2,24],36:[2,24]},{16:[2,22],34:[2,22],35:[2,22],36:[2,22]},{16:[2,23],34:[2,23],35:[2,23],36:[2,23]},{16:[2,28],23:[2,28],24:[2,28],34:[2,28],35:[2,28],36:[2,28]},{26:[1,41],27:[1,42]},{26:[2,32],27:[2,32]},{30:[1,43]},{26:[2,34],27:[2,34]},{16:[2,21],34:[2,21],35:[2,21],36:[2,21]},{16:[2,30],34:[2,30],35:[2,30],36:[2,30]},{28:44,29:[1,38],32:[1,39]},{31:[1,45]},{26:[2,31],27:[2,31]},{26:[2,33],27:[2,33]}],defaultActions:{12:[2,12],13:[2,13],14:[2,14],15:[2,15],18:[2,36],19:[2,37],20:[2,38],28:[2,10]},parseError:function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},parse:function parse(input){var self=this,stack=[0],vstack=[null],lstack=[],table=this.table,yytext="",yylineno=0,yyleng=0,recovering=0,TERROR=2,EOF=1;var args=lstack.slice.call(arguments,1);this.lexer.setInput(input);this.lexer.yy=this.yy;this.yy.lexer=this.lexer;this.yy.parser=this;if(typeof this.lexer.yylloc=="undefined"){this.lexer.yylloc={}}var yyloc=this.lexer.yylloc;lstack.push(yyloc);var ranges=this.lexer.options&&this.lexer.options.ranges;if(typeof this.yy.parseError==="function"){this.parseError=this.yy.parseError}else{this.parseError=Object.getPrototypeOf(this).parseError}function popStack(n){stack.length=stack.length-2*n;vstack.length=vstack.length-n;lstack.length=lstack.length-n}function lex(){var token;token=self.lexer.lex()||EOF;if(typeof token!=="number"){token=self.symbols_[token]||token}return token}var symbol,preErrorSymbol,state,action,a,r,yyval={},p,len,newState,expected;while(true){state=stack[stack.length-1];if(this.defaultActions[state]){action=this.defaultActions[state]}else{if(symbol===null||typeof symbol=="undefined"){symbol=lex()}action=table[state]&&table[state][symbol]}if(typeof action==="undefined"||!action.length||!action[0]){var errStr="";expected=[];for(p in table[state]){if(this.terminals_[p]&&p>TERROR){expected.push("'"+this.terminals_[p]+"'")}}if(this.lexer.showPosition){errStr="Parse error on line "+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(", ")+", got '"+(this.terminals_[symbol]||symbol)+"'"}else{errStr="Parse error on line "+(yylineno+1)+": Unexpected "+(symbol==EOF?"end of input":"'"+(this.terminals_[symbol]||symbol)+"'")}this.parseError(errStr,{text:this.lexer.match,token:this.terminals_[symbol]||symbol,line:this.lexer.yylineno,loc:yyloc,expected:expected})}if(action[0]instanceof Array&&action.length>1){throw new Error("Parse Error: multiple actions possible at state: "+state+", token: "+symbol)}switch(action[0]){case 1:stack.push(symbol);vstack.push(this.lexer.yytext);lstack.push(this.lexer.yylloc);stack.push(action[1]);symbol=null;if(!preErrorSymbol){yyleng=this.lexer.yyleng;yytext=this.lexer.yytext;yylineno=this.lexer.yylineno;yyloc=this.lexer.yylloc;if(recovering>0){recovering--}}else{symbol=preErrorSymbol;preErrorSymbol=null}break;case 2:len=this.productions_[action[1]][1];yyval.$=vstack[vstack.length-len];yyval._$={first_line:lstack[lstack.length-(len||1)].first_line,last_line:lstack[lstack.length-1].last_line,first_column:lstack[lstack.length-(len||1)].first_column,last_column:lstack[lstack.length-1].last_column};if(ranges){yyval._$.range=[lstack[lstack.length-(len||1)].range[0],lstack[lstack.length-1].range[1]]}r=this.performAction.apply(yyval,[yytext,yyleng,yylineno,this.yy,action[1],vstack,lstack].concat(args));if(typeof r!=="undefined"){return r}if(len){stack=stack.slice(0,-1*len*2);vstack=vstack.slice(0,-1*len);lstack=lstack.slice(0,-1*len)}stack.push(this.productions_[action[1]][0]);vstack.push(yyval.$);lstack.push(yyval._$);newState=table[stack[stack.length-2]][stack[stack.length-1]];stack.push(newState);break;case 3:return true}}return true}};function Parser(){this.yy={}}Parser.prototype=parser;parser.Parser=Parser;return new Parser}();if(typeof require!=="undefined"&&typeof exports!=="undefined"){exports.parser=parser;exports.Parser=parser.Parser;exports.parse=function(){return parser.parse.apply(parser,arguments)};exports.main=function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};if(typeof module!=="undefined"&&require.main===module){exports.main(process.argv.slice(1))}}
}).call(this,require("FWaASH"))
},{"FWaASH":5,"fs":3,"path":4}],11:[function(require,module,exports){
(function (global){
// Generated by CoffeeScript 1.8.0
(function() {
  var Observable, autoDeps, computeDependencies, copy, extend, flatten, get, last, magicDependency, remove, splat, withBase,
    __slice = [].slice;

  Observable = function(value, context) {
    var changed, fn, listeners, notify, notifyReturning, self;
    if (typeof (value != null ? value.observe : void 0) === "function") {
      return value;
    }
    listeners = [];
    notify = function(newValue) {
      return copy(listeners).forEach(function(listener) {
        return listener(newValue);
      });
    };
    if (typeof value === 'function') {
      fn = value;
      self = function() {
        magicDependency(self);
        return value;
      };
      changed = function() {
        value = computeDependencies(self, fn, changed, context);
        return notify(value);
      };
      value = computeDependencies(self, fn, changed, context);
    } else {
      self = function(newValue) {
        if (arguments.length > 0) {
          if (value !== newValue) {
            value = newValue;
            notify(newValue);
          }
        } else {
          magicDependency(self);
        }
        return value;
      };
    }
    self.each = function(callback) {
      magicDependency(self);
      if (value != null) {
        [value].forEach(function(item) {
          return callback.call(item, item);
        });
      }
      return self;
    };
    if (Array.isArray(value)) {
      ["concat", "every", "filter", "forEach", "indexOf", "join", "lastIndexOf", "map", "reduce", "reduceRight", "slice", "some"].forEach(function(method) {
        return self[method] = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          magicDependency(self);
          return value[method].apply(value, args);
        };
      });
      ["pop", "push", "reverse", "shift", "splice", "sort", "unshift"].forEach(function(method) {
        return self[method] = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return notifyReturning(value[method].apply(value, args));
        };
      });
      notifyReturning = function(returnValue) {
        notify(value);
        return returnValue;
      };
      extend(self, {
        each: function(callback) {
          self.forEach(function(item, index) {
            return callback.call(item, item, index, self);
          });
          return self;
        },
        remove: function(object) {
          var index;
          index = value.indexOf(object);
          if (index >= 0) {
            return notifyReturning(value.splice(index, 1)[0]);
          }
        },
        get: function(index) {
          magicDependency(self);
          return value[index];
        },
        first: function() {
          magicDependency(self);
          return value[0];
        },
        last: function() {
          magicDependency(self);
          return value[value.length - 1];
        },
        size: function() {
          magicDependency(self);
          return value.length;
        }
      });
    }
    extend(self, {
      listeners: listeners,
      observe: function(listener) {
        return listeners.push(listener);
      },
      stopObserving: function(fn) {
        return remove(listeners, fn);
      },
      toggle: function() {
        return self(!value);
      },
      increment: function(n) {
        return self(value + n);
      },
      decrement: function(n) {
        return self(value - n);
      },
      toString: function() {
        return "Observable(" + value + ")";
      }
    });
    return self;
  };

  Observable.concat = function() {
    var args, o;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    args = Observable(args);
    o = Observable(function() {
      return flatten(args.map(splat));
    });
    o.push = args.push;
    return o;
  };

  module.exports = Observable;

  extend = function() {
    var name, source, sources, target, _i, _len;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (name in source) {
        target[name] = source[name];
      }
    }
    return target;
  };

  global.OBSERVABLE_ROOT_HACK = [];

  autoDeps = function() {
    return last(global.OBSERVABLE_ROOT_HACK);
  };

  magicDependency = function(self) {
    var observerStack;
    if (observerStack = autoDeps()) {
      return observerStack.push(self);
    }
  };

  withBase = function(self, update, fn) {
    var deps, value, _ref;
    global.OBSERVABLE_ROOT_HACK.push(deps = []);
    try {
      value = fn();
      if ((_ref = self._deps) != null) {
        _ref.forEach(function(observable) {
          return observable.stopObserving(update);
        });
      }
      self._deps = deps;
      deps.forEach(function(observable) {
        return observable.observe(update);
      });
    } finally {
      global.OBSERVABLE_ROOT_HACK.pop();
    }
    return value;
  };

  computeDependencies = function(self, fn, update, context) {
    return withBase(self, update, function() {
      return fn.call(context);
    });
  };

  remove = function(array, value) {
    var index;
    index = array.indexOf(value);
    if (index >= 0) {
      return array.splice(index, 1)[0];
    }
  };

  copy = function(array) {
    return array.concat([]);
  };

  get = function(arg) {
    if (typeof arg === "function") {
      return arg();
    } else {
      return arg;
    }
  };

  splat = function(item) {
    var result, results;
    results = [];
    if (item == null) {
      return results;
    }
    if (typeof item.forEach === "function") {
      item.forEach(function(i) {
        return results.push(i);
      });
    } else {
      result = get(item);
      if (result != null) {
        results.push(result);
      }
    }
    return results;
  };

  last = function(array) {
    return array[array.length - 1];
  };

  flatten = function(array) {
    return array.reduce(function(a, b) {
      return a.concat(b);
    }, []);
  };

}).call(this);

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],12:[function(require,module,exports){
module.exports={
  "name": "hamlet-runtime",
  "version": "0.6.0-pre.21",
  "devDependencies": {
    "browserify": "^4.1.11",
    "coffee-script": "~1.7.1",
    "hamlet-compiler": "~0.6.0-pre.11",
    "jsdom": "^0.10.5",
    "mocha": "~1.12.0",
    "uglify-js": "~2.3.6"
  },
  "dependencies": {
    "o_0": "0.3.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dr-coffee-labs/hamlet-compiler.git"
  },
  "scripts": {
    "prepublish": "script/prepublish",
    "test": "script/test"
  },
  "files": [
    "dist/"
  ],
  "main": "dist/runtime.js"
}

},{}]},{},[2])
